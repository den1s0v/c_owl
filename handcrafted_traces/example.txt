// Используйте подсветку синтаксиса в Notepad++
// XML-файл находится в ../trace_gen/NPP-UDL_highlighting/Трасса_npp.xml

Это - пример алгоритма и нескольких трасс к нему.
Этот файл может быть автоматически распарсен, и на парах трасса-алгоритм прогнаны тесты (текст -> онтология -> Pellet reasoner -> найденные ошибки -> сравнение ошибок с эталонными (указанными вручную)).
Этот текст и другие строки, не относящиеся к записи алгоритмов и трасс, игнорируются парсером, удалять их не обязательно.

Трассы ссылаются на алгоритм по имени. Нельзя сослаться на алгоритм из другого файла (если это требуется, можно скопировать алгоритм).
Порядок следования трассы и алгоритма (выше/ниже по файлу) не играет роли.

Для описания алгоритма минимально необходимы: слово "алгоритм" и имя латиницей без пробелов (знаки можно), 
затем текст алгоритма без пустых строк и лишних комментариев, 
обрамлённый фигурными скобками (также желательно иметь пустую строку ниже алгоритма).

Отступы имеют значение для алгоритма. 
Более вложенные элементы должны иметь больший отступ, элементы на том же уровне должны иметь одинаковый отступ.
Вложенные блоки могут быть обрамлены фигурными скобками строго на отдельных строках с отступом родительского элемента, но они не обязательны, достаточно поддерживать отступы.

Коментарии в алгоритме имеют специальное значение, а именно - называть составные структуры, которые нельзя назвать идентификатором внутри псевдокода. Такие комментарии пишутся в конце первой строки, на которой присутствует нужная алгоритмическая структура. Список этих структур далее:
	Альтернатива
	Цикл (пока / делать (цикл ДО) / для / для каждого)
	Именованное следование (следование, отличное от тела цикла/функции/...)
	


// SKIP___алгоритм example_alt (<< ... после имени, через пробел допускается произвольный текст)
{
	поприветствовать
	если ответ_позитивный  // по_ответу  <<- певое слово комментария - это имя сложной структуры (здесь - развилки), остальное игнорируется.
		поддержать_тон
		рассказать_анекдот
	иначе если ответ_негативный
	{
		удивиться
		узнать_что_случилось
		посочувствовать
	}
	иначе
		спросить_о_настроении
	пожелать_удачи
}


Трасса обрамляется строками  началась/закончилась программа, а перед ними в пределах 4 строк должна присутствовать одна строка, содержащая имя алгоритма в виде отдельного слова - эта строка становится именем трассы. Кроме имени алгоритма, она должна содержать ещё что-то, чтобы отличаться от названия алгоритма.
Для трассы отступы НЕ имеют значения. 
Их можно применять для удобства чтения. 
Программно, трасса в любом случае рассматривается как плоская линейная последовательность.

Всякая трасса считается полной (т.е.) законченной. Неполные трассы пока не поддерживаются.


// example_alt 10 первая трасса
// в строке выше - имя трассы (комментарий "//" или "#" отбрасывается)
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
        условие (ответ_негативный) выполнилось 1-й раз - истина
        ветка условия (ответ_негативный) началась 1-й раз
            удивиться выполнилось 1-й раз 
            узнать_что_случилось выполнилось 1-й раз // в трассе можно добавлять любые комментарии
            посочувствовать выполнилось 1-й раз 
        ветка условия (ответ_негативный) закончилась 1-й раз
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

Комментарии в трассе не являются частью синтаксиса, 
но могут быть использованы для указания ошибочных строк. 
Для этого в конце строки должен присутствовать комментарий, содержащий слово "ошибка" или "error". После одного из этих слов и опционального двоеточия должно идти одно слово (без пробелов) - наименование ошибки (или несколько слов, разделённых пробелами и/или запятыми); после него, в конце строки, допускается произвольный комментарий "для себя", взятый в круглые скобки.
Эта информация не используется в онтологии при рассуждении на трассе, но применяется для тестирования.
Если в трассе обнаружена ошибка, будет вычислена строка, где стоит ошибочный объект, и сравнена с явно указанной аннотацией.
При совпадении строк тест будет считаться пройденным.
Если в пределах трассы не найдено комментариев с указанием на ошибку, то трасса считается полностью верной.

// example_alt 00 другая, ОШИБОЧНАЯ трасса
// вся строка выше - это имя трассы (комментарий "//" или "#" отбрасывается)
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
        условие (ответ_негативный) выполнилось 1-й раз - ложь
    закончилась развилка по_ответу 1-й раз  // error: AllFalseNoElse (Нет ветки ИНАЧЕ)
    выполнилось развилка по_ответу 2-й раз  // error: DuplicateActs (дубликат акта)
	пожелать_удачи выполнилось 1-й раз 
	пожелать_удачи выполнилось 2-й раз   // error: DuplicateActs (дубликат акта)
закончилась программа
}



Ещё пример, с функцией.


// алгоритм alg03_seq3 (следование из 3 действий)
функция main
{
    делай_раз
    делай_два
    делай_три
}


/* 
SKIP____alg03_seq3 MisplacedBefore (с.2) Акт до main
(Длинные комментарии также можно использовать) */
{
началась программа
делай_раз выполнилось 1-й раз  // ошибка WrongContext
началась функция main 1-й раз
    делай_два выполнилось 1-й раз 
    делай_три выполнилось 1-й раз 
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 ActsPairMisorder-1 (с.3) Нарушен порядок следования
трасса  категории ошибок: LinearOrder (ActsPairMisorder) */
{
началась программа
началась функция main 1-й раз
    делай_два выполнилось 1-й раз  // ошибка TooEarly
    делай_раз выполнилось 1-й раз
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 ActsPairMisorder-2 (с.4) Нарушен порядок следования
трасса  категории ошибок: LinearOrder (ActsPairMisorder) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_три выполнилось 1-й раз  // ошибка TooEarly
    делай_два выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 ActsPairMisorder-7 (с.4) Нарушен порядок следования
трасса  категории ошибок: LinearOrder (ActsPairMisorder) */
{
началась программа
началась функция main 1-й раз
    делай_три выполнилось 1-й раз  // ошибка TooEarly
    делай_два выполнилось 1-й раз  // ошибка TooEarly
    делай_раз выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 MissingAct-3 (с.5) Пропущен акт в следовании
трасса  категории ошибок: SeqA_contains_B (MissingAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
закончилась функция main 1-й раз  // ошибка MissingAct
закончилась программа
}


    делай_раз выполнилось 1-й раз  // error: DuplicateAct, WrongExecTime


// алгоритм alg03_seq3_2 (без функции)
{
    делай_раз
    делай_два
    делай_три
}

/* 
alg03_seq3_2  Трасса1
*/
{
началась программа
	делай_раз выполнилось 1-й раз  // коммент
    делай_два выполнилось 1-й раз 
    делай_три выполнилось 1-й раз 
закончилась программа
}
