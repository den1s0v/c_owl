// Используйте подсветку синтаксиса в Notepad++
// XML-файл находится в ../trace_gen/NPP-UDL_highlighting/Трасса_npp.xml

/* Это - пример алгоритма и нескольких трасс к нему.
Этот файл может быть автоматически распарсен, и на парах трасса-алгоритм прогнаны тесты (текст -> онтология -> Pellet reasoner -> найденные ошибки -> сравнение ошибок с эталонными (указанными вручную)).
Этот текст и другие строки, не относящиеся к записи алгоритмов и трасс, игнорируются парсером, удалять их не обязательно.

Трассы ссылаются на алгоритм по имени. Нельзя сослаться на алгоритм из другого файла (если это требуется, можно скопировать алгоритм).
Порядок следования трассы и алгоритма (выше/ниже по файлу) не играет роли.

Для описания алгоритма минимально необходимы: слово "алгоритм" и имя латиницей без пробелов (знаки можно), 
затем текст алгоритма без пустых строк и лишних комментариев, 
обрамлённый фигурными скобками (также желательно иметь пустую строку ниже алгоритма).

Отступы имеют значение для алгоритма. 
Более вложенные элементы должны иметь больший отступ, элементы на том же уровне должны иметь одинаковый отступ.
Вложенные блоки могут быть обрамлены фигурными скобками строго на отдельных строках с отступом родительского элемента, но они не обязательны, достаточно поддерживать отступы.

Коментарии в алгоритме имеют специальное значение, а именно - называть составные структуры, которые нельзя назвать идентификатором внутри псевдокода. Такие комментарии пишутся в конце первой строки, на которой присутствует нужная алгоритмическая структура. Список этих структур далее:
	Альтернатива
	Цикл (пока / делать (цикл ДО) / для / для каждого)
	Именованное следование (следование, отличное от тела цикла/функции/...)
 */	


// алгоритм example_alt (<< ... после имени, через пробел допускается произвольный текст)
{
	поприветствовать
	если ответ_позитивный -> ложь // по_ответу  <<- первое слово комментария - это имя сложной структуры (здесь - развилки), остальное игнорируется.
		поддержать_тон
		рассказать_анекдот
	иначе если ответ_негативный -> истина
	{
		удивиться
		узнать_что_случилось
		посочувствовать
	}
	иначе
		спросить_о_настроении
	пожелать_удачи
}

// algorithm example_alt_eng (<< the only word after "algorithm" is considered)
{
	greet
	if response_is_positive // by_response
		speak_in_tone
		tell_a_joke
	else if response_is_negative
	{
		wonder
		ask_what_happened
		sympathize
	}
	else
		ask_of_mood
	wish_good_luck
}

// SKIP____example_alt_eng 01 first trace
{
program began
	greet executed 1st time 
    alternative by_response began 1st time  // begin of alternative
        condition (response_is_positive) executed 1st time - true
        condition (response_is_negative) executed 1st time - false
        branch of condition (response_is_negative) began 1st time
            wonder executed 1st time 
            ask_what_happened executed 1st time // any comments beside the trace lines are allowed
            sympathize executed 1st time 
        branch of condition (response_is_negative) ended 1st time
    alternative by_response ended 1st time
	wish_good_luck executed 1st time 
program ended
}

// algorithm ex_seq_eng
{
greet
ask_of_mood
sympathize		// this would be skipped
tell_a_joke
wish_good_luck
}

// ex_seq_eng ex-seq_trace
{
program began
	greet executed 1st time 
	ask_of_mood executed 1st time 
	tell_a_joke executed 1st time 
	wish_good_luck executed 1st time 
program ended
}


/* Трасса обрамляется строками  началась/закончилась программа, а перед ними в пределах 4 строк должна присутствовать одна строка, содержащая имя алгоритма в виде отдельного слова - эта строка становится именем трассы. Кроме имени алгоритма, она должна содержать ещё что-то, чтобы отличаться от названия алгоритма.
Для строк трассы отступы НЕ имеют значения. 
Их можно применять для удобства чтения. 
Программно, трасса в любом случае рассматривается как плоская линейная последовательность.

Всякая трасса считается полной (т.е.) законченной. Неполные трассы пока не поддерживаются. */


// example_alt первая трасса
// в строке выше - имя трассы (комментарий "//" или "#" отбрасывается)
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
        условие (ответ_негативный) выполнилось 1-й раз - истина
        ветка условия (ответ_негативный) началась 1-й раз
            удивиться выполнилось 1-й раз 
            узнать_что_случилось выполнилось 1-й раз // в трассе можно добавлять любые комментарии
            посочувствовать выполнилось 1-й раз 
        ветка условия (ответ_негативный) закончилась 1-й раз
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt 00 вторая трасса
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
        условие (ответ_негативный) выполнилось 1-й раз - ложь
        ветка иначе началась 1-й раз
            спросить_о_настроении выполнилось 1-й раз 
        ветка иначе закончилась 1-й раз
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt 1 третья трасса
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - истина
        ветка условия (ответ_позитивный) началась 1-й раз
            поддержать_тон выполнилось 1-й раз 
            рассказать_анекдот выполнилось 1-й раз 
        ветка условия (ответ_позитивный) закончилась 1-й раз
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

/* Комментарии в трассе не являются частью синтаксиса, 
но могут быть использованы для указания ошибочных строк. 
Для этого в конце строки должен присутствовать комментарий, содержащий слово "ошибка" или "error". После одного из этих слов и опционального двоеточия должно идти одно слово (без пробелов) - наименование ошибки (или несколько слов, разделённых пробелами и/или запятыми); после него, в конце строки, допускается произвольный комментарий "для себя", взятый в круглые скобки.
Эта информация не используется в онтологии при рассуждении на трассе, но применяется для тестирования.
Если в трассе обнаружена ошибка, будет вычислена строка, где стоит ошибочный объект, и сравнена с явно указанной аннотацией.
При совпадении строк тест будет считаться пройденным.
Если в пределах трассы не найдено комментариев с указанием на ошибку, то трасса считается полностью верной. */

// SKIP____example_alt 00 другая, ОШИБОЧНАЯ трасса
// вся строка выше - это имя трассы (комментарий "//" или "#" отбрасывается)
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
        условие (ответ_негативный) выполнилось 1-й раз - ложь
    закончилась развилка по_ответу 1-й раз  // error: AllFalseNoElse, TooEarly (Нет ветки ИНАЧЕ, конец слишком рано)
    выполнилось развилка по_ответу 2-й раз  // error: DuplicateOfAct (дубликат акта)
	// пожелать_удачи началось 1-й раз 
	// поприветствовать закончилось 1-й раз  // error: CorrespondingEndMismatched
	спросить_о_настроении выполнилось 1-й раз // error: DisplacedAct, WrongContext (перемещён в другой контекст)
	пожелать_удачи выполнилось 2-й раз   // error: DuplicateOfAct (дубликат акта)
закончилась программа
}

// SKIP____example_alt 00 не первое условие
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_негативный) выполнилось 1-й раз - ложь // error: NoFirstCondition, DisplacedAct
        условие (ответ_позитивный) выполнилось 1-й раз - ложь // error: DisplacedAct
        ветка иначе началась 1-й раз // error: TooEarly
            спросить_о_настроении выполнилось 1-й раз 
        ветка иначе закончилась 1-й раз
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt 00 ветка при ложном условии
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
        ветка условия (ответ_позитивный) началась 1-й раз // error: BranchOfFalseCondition
        ветка условия (ответ_позитивный) закончилась 1-й раз // error: ExtraAct
        условие (ответ_негативный) выполнилось 1-й раз - ложь
        ветка иначе началась 1-й раз
            спросить_о_настроении выполнилось 1-й раз 
        ветка иначе закончилась 1-й раз
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt 10 условие после ветки
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - истина
        ветка условия (ответ_позитивный) началась 1-й раз
            поддержать_тон выполнилось 1-й раз 
            рассказать_анекдот выполнилось 1-й раз 
        ветка условия (ответ_позитивный) закончилась 1-й раз
        условие (ответ_негативный) выполнилось 1-й раз - ложь // error: ConditionAfterBranch, ExtraAct
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt 1 лишняя вторая ветка
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - true
        ветка условия (ответ_позитивный) началась 1-й раз
            поддержать_тон выполнилось 1-й раз 
            рассказать_анекдот выполнилось 1-й раз 
        ветка условия (ответ_позитивный) закончилась 1-й раз
        ветка иначе началась 1-й раз  					// error: AnotherBranch
            спросить_о_настроении выполнилось 1-й раз	// error: ExtraAct
        ветка иначе закончилась 1-й раз  				// error: ExtraAct
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt 1 не та ветка
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - true
        ветка условия (ответ_негативный) началась 1-й раз	// error: NoBranchWhenConditionIsTrue
            удивиться выполнилось 1-й раз 					// error: ExtraAct
            узнать_что_случилось выполнилось 1-й раз		// error: ExtraAct
            посочувствовать выполнилось 1-й раз 			// error: ExtraAct
        ветка условия (ответ_негативный) закончилась 1-й раз// error: ExtraAct
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt 1 не та ветка (рус ош)
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - true
        ветка условия (ответ_негативный) началась 1-й раз	// error: Нет ветки при истинном условии
            удивиться выполнилось 1-й раз 					// error: Лишний акт
            узнать_что_случилось выполнилось 1-й раз		// error: Лишний акт
            посочувствовать выполнилось 1-й раз 			// error: Лишний акт
        ветка условия (ответ_негативный) закончилась 1-й раз// error: Лишний акт
    закончилась развилка по_ответу 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt 00 нет else
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
        условие (ответ_негативный) выполнилось 1-й раз - ложь
    закончилась развилка по_ответу 1-й раз // error: AllFalseNoElse, TooEarly
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt 00 нет условия
{
началась программа
	поприветствовать выполнилось 1-й раз 
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
    закончилась развилка по_ответу 1-й раз // error: NoNextCondition, TooEarly
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}


// алгоритм alg_ru
{
пока не_зелёный -> истина,истина,ложь  // ожидание
{
    если цвет_красный -> истина,ложь  // по_цвету
	{
		ждать
	}
    иначе если цвет_жёлтый -> ложь
	{
        приготовиться
	}
}
}

// алгоритм alg_ru2
{
пока не_зелёный -> истина,истина,ложь  // ожидание
    если цвет_красный -> истина,ложь  // по_цвету
		ждать
    иначе если цвет_жёлтый -> ложь
        приготовиться
}

// alg_ru трасса
{
началась программа
начался цикл ожидание 1-й раз
началась итерация 1 цикла ожидание  // error: DisplacedAct
условие цикла (не_зелёный) выполнилось 1-й раз - истина  // error: MisplacedDeeper, DisplacedAct
началась развилка по_цвету 1-й раз  // error: MissingIterationAfterSuccessfulCondition, TooEarly
условие развилки (цвет_красный) выполнилось 1-й раз - истина
ветка условия развилки (цвет_красный) началась 1-й раз
ждать выполнилось 1-й раз
ветка условия развилки (цвет_красный) закончилась 1-й раз
закончилась развилка по_цвету 1-й раз
закончилась итерация 1 цикла ожидание
условие цикла (не_зелёный) выполнилось 2-й раз - истина
началась итерация 2 цикла ожидание
началась развилка по_цвету 2-й раз
условие развилки (цвет_красный) выполнилось 2-й раз - ложь
условие развилки (цвет_жёлтый) выполнилось 1-й раз - ложь
закончилась развилка по_цвету 2-й раз
закончилась итерация 2 цикла ожидание
условие цикла (не_зелёный) выполнилось 3-й раз - ложь
закончился цикл ожидание 1-й раз
закончилась программа
}


// алгоритм alg_en
{
while not_green  // waiting
    if red  // over_color
        wait
    else if yellow
        get_ready
}

// alg_en trace 
{
program began
 loop waiting began 1st time
  condition of loop (not_green) evaluated 1st time - true
  iteration 1 of loop waiting began
   alternative over_color began 1st time
    condition of alternative (red) evaluated 1st time - true
    branch of condition (red) began 1st time
     wait executed 1st time
    branch of condition (red) ended 1st time
   alternative over_color ended 1st time
  iteration 1 of loop waiting ended
  condition of loop (not_green) evaluated 2nd time - true
  iteration 2 of loop waiting began
   alternative over_color began 2nd time
    condition of alternative (red) evaluated 2nd time - false
    condition of alternative (yellow) evaluated 1st time - false
   alternative over_color ended 2nd time
  iteration 2 of loop waiting ended
  condition of loop (not_green) evaluated 3rd time - false
 loop waiting ended 1st time
program ended
}


// алгоритм alg_en1
{
while not_green -> false  // waiting
    if red -> true // over_color
        wait
    else if yellow -> true
        get_ready
}

// alg_en1 trace 
{
program began
 loop waiting began 1st time
  condition of loop (not_green) evaluated 1st time - false
  iteration 1 of loop waiting began
   alternative over_color began 1st time
    condition of alternative (red) evaluated 1st time - true
    branch of condition (red) began 1st time
     wait executed 1st time
    branch of condition (red) ended 1st time
   alternative over_color ended 1st time
  iteration 1 of loop waiting ended
  condition of loop (not_green) evaluated 2nd time - true
  iteration 2 of loop waiting began
   alternative over_color began 2nd time
    condition of alternative (red) evaluated 2nd time - false
    condition of alternative (yellow) evaluated 1st time - false
   alternative over_color ended 2nd time
  iteration 2 of loop waiting ended
  condition of loop (not_green) evaluated 3rd time - false
 loop waiting ended 1st time
program ended
}

####################
while not_green -> false  // waiting
    if red -> true // over_color
        wait
    else if yellow -> true
        get_ready


program began
 loop waiting began 1st time
  condition of loop (not_green) evaluated 1st time - false		# < здесь причина ошибки (жёлтый фон)
  iteration 1 of loop waiting began								# < здесь будет ошибка (красный фон)
   alternative over_color began 1st time
    condition of alternative (red) evaluated 1st time - true
    branch of condition (red) began 1st time
     wait executed 1st time
    branch of condition (red) ended 1st time
   alternative over_color ended 1st time
  iteration 1 of loop waiting ended
  condition of loop (not_green) evaluated 2nd time - true
  iteration 2 of loop waiting began
   alternative over_color began 2nd time
    condition of alternative (red) evaluated 2nd time - false
    condition of alternative (yellow) evaluated 1st time - false
   alternative over_color ended 2nd time
  iteration 2 of loop waiting ended
  condition of loop (not_green) evaluated 3rd time - false
 loop waiting ended 1st time
program ended
##################################


// алгоритм example_alt2
{
	если ответ_позитивный  // по_ответу
		поддержать_тон
		рассказать_анекдот
	иначе если ответ_негативный
	{
		удивиться
		узнать_что_случилось
		посочувствовать
	}
	спросить_о_настроении
	пожелать_удачи
}

// SKIP____example_alt2 00 лишняя ветка под своим условием
{
началась программа
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
        условие (ответ_негативный) выполнилось 1-й раз - ложь
        ветка условия (ответ_негативный) началась 1-й раз  // error: BranchOfFalseCondition, AllFalseNoEnd
        ветка условия (ответ_негативный) закончилась 1-й раз   // error: ExtraAct
    закончилась развилка по_ответу 1-й раз
	спросить_о_настроении выполнилось 2-й раз   // error: WrongExecTime
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt2 00 лишняя ветка под чужим условием
{
началась программа
    началась развилка по_ответу 1-й раз  // начало развилки
        условие (ответ_позитивный) выполнилось 1-й раз - ложь
        условие (ответ_негативный) выполнилось 1-й раз - ложь
        ветка условия (ответ_позитивный) началась 1-й раз  // error: AllFalseNoEnd, ExtraAct
        ветка условия (ответ_позитивный) закончилась 1-й раз   // error: ExtraAct
    закончилась развилка по_ответу 1-й раз
	спросить_о_настроении выполнилось 2-й раз   // error: WrongExecTime
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}

// SKIP____example_alt2 00 пустая развилка
{
началась программа
    началась развилка по_ответу 1-й раз  // начало развилки
    закончилась развилка по_ответу 1-й раз // error: NoFirstCondition, TooEarly
	спросить_о_настроении выполнилось 1-й раз
	пожелать_удачи выполнилось 1-й раз 
закончилась программа
}


/* Ещё пример, с функцией. */


// алгоритм alg03_seq3 (следование из 3 действий)
функция main
{
    делай_раз
    делай_два
    делай_три
}


/* 
SKIP____alg03_seq3 Empty_trace
*/
{
началась программа
началась функция main 1-й раз
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 DuplicateOfAct-1 (с.5)
*/
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
    делай_два выполнилось 2-й раз  // ошибка DuplicateOfAct
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 MisplacedBefore (с.2) Акт до main
(Длинные комментарии также можно использовать) */
{
началась программа
делай_раз выполнилось 1-й раз  // ошибка WrongContext
началась функция main 1-й раз
    делай_два выполнилось 1-й раз 
    делай_три выполнилось 1-й раз 
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 ActsPairMisorder-1 (с.3) Нарушен порядок следования
трасса  категории ошибок: LinearOrder (ActsPairMisorder) */
{
началась программа
началась функция main 1-й раз
    делай_два выполнилось 1-й раз  // ошибка TooEarly
    делай_раз выполнилось 1-й раз
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 ActsPairMisorder-2 (с.4) Нарушен порядок следования
трасса  категории ошибок: LinearOrder (ActsPairMisorder) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_три выполнилось 1-й раз  // ошибка TooEarly
    делай_два выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 ActsPairMisorder-7 (с.4) Нарушен порядок следования
трасса  категории ошибок: LinearOrder (ActsPairMisorder) */
{
началась программа
началась функция main 1-й раз
    делай_три выполнилось 1-й раз  // ошибка TooEarly
    делай_два выполнилось 1-й раз  // ошибка TooEarly
    делай_раз выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}

/* 
SKIP____alg03_seq3 MissingAct-3 (с.5) Пропущен акт в следовании
трасса  категории ошибок: SeqA_contains_B (MissingAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
закончилась функция main 1-й раз  // ошибка MissingAct
закончилась программа
}


/* 
SKIP____alg03_seq3 WrongContext (с.7)
*/
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
    делай_раз выполнилось 2-й раз  // error: WrongContext
закончилась программа
}


    /* делай_раз выполнилось 1-й раз  // error: DuplicateOfAct, WrongExecTime */


// алгоритм _____alg03_seq3_2 (без функции)
{
    делай_раз
    делай_два
    делай_три
}

/* 
SKIP____alg03_seq3_2  Трасса1
*/
{
началась программа
	делай_раз выполнилось 1-й раз  // коммент
    делай_два выполнилось 1-й раз 
    делай_три выполнилось 1-й раз 
закончилась программа
}
