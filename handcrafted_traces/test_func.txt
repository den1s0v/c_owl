// test_func.txt

// алгоритм alg03_seq3 (следование из 3 действий)
функция main
{
    делай_раз
    делай_два
    делай_три
}
// SKIP__alg03_seq3 - (0)
// трасса 
{
началась программа
закончилась программа
}


// test_func.txt

// алгоритм alg_fact1 (факториал)
{
	printf("Hello, %s!", "World");

	функция fact(int n) :
	{
		если условие (n <= 2) -> 0,0,1,1  // проверка_базы
			return 1
		иначе
			value = fact(n-1)
			return n * value
	}
	assert(fact(4) == 120)
	
	функция fact2(int x) : int
	{
		если условие (1 == fact(x)) -> 0,0,1,1  // проверка_базы_2 (в fact2)
			result = 1
			return result
		иначе
			return fact2(x-1) * x
	}
	
	fact2(6)
}
// SKIP__alg_fact1 - (0)
// трасса 
{
началась программа
закончилась программа
}



// алгоритм fill_py (заливка на питоне)
{
	matrix = [
	   [5, 777, 5, 777, 5, 99],
	   [5, 777, 777, 777, 5, 99],
	   [5, 5, 5, 5, 5, 99],
	   [67, 0, 99, 99, 99, 99],
	   [67, 0, 99, 99, 11, 11],
	   [99, 0, 99, 99, 11, 6]
	]


	def flood_fill(matrix, x, y, new_value):
	   x_len, y_len = len(matrix), len(matrix[0])
	   color = matrix[x][y]
	   if color == new_value:
		   return matrix


	   def fill(r, c):
		   if matrix[r][c] == color:
			   matrix[r][c] = new_value
			   if r >= 1: fill(r - 1, c)
			   if r + 1 < x_len: fill(r + 1, c)
			   if c >= 1: fill(r, c-1)
			   if c + 1 < y_len: fill(r, c + 1)


	   fill(x, y)
	   return matrix


	print('Изначальная матрица:')
	print('\n'.join('\t'.join(map(str, row)) for row in matrix))


	flood_fill(matrix, 3, 3, 66)


	print('Обновлённая матрица:')
	print('\n'.join('\t'.join(map(str, row)) for row in matrix))
}
// SKIP__alg_fact1 - (0)
// трасса 
{
началась программа
закончилась программа
}

•
# https://www.techiedelight.com/ru/flood-fill-algorithm/
# https://habr.com/ru/companies/yandex_praktikum/articles/715874/
// int[10][10] 
	   // if color != old_color && color == new_color: -> 00111111 // готово

// алгоритм fill_rus (заливка)
{
	matrix = random_matrix()

	function flood_fill(int x, int y, int new_color, int old_color):
	   color = matrix[x][y]
	   if color != old_color: -> 00111111 // готово
		   return
		   
	   matrix[x][y] = new_color
	   if (x >= 1): -> 1,0,1 // влево
			flood_fill(x - 1, y)
	   if (y >= 1): -> 1,1,1 // вверх
			flood_fill(x, y - 1)
	   if (x + 1 < W): -> 1,1,1 // вправо
			flood_fill(x + 1, y)
	   if (y + 1 < H): -> 1,1,1 // вниз
			flood_fill(x, y + 1)

	flood_fill(3, 2, 0xff, matrix[3][2])
}


// алгоритм fill (заливка)
{
	matrix = random_matrix()

	function flood_fill(int x, int y, int new_color, int old_color):
	   color = matrix[x][y]
	   if color != old_color: -> 00111111 // done
		   return
		   
	   matrix[x][y] = new_color
	   if (x >= 1): -> 1,0,1 // left
			flood_fill(x - 1, y)
	   if (y >= 1): -> 1,1,1 // up
			flood_fill(x, y - 1)
	   if (x + 1 < W): -> 1,1,1 // right
			flood_fill(x + 1, y)
	   if (y + 1 < H): -> 1,1,1 // down
			flood_fill(x, y + 1)

	flood_fill(3, 2, 255, matrix[3][2])
}
// fill - (0)
// трасса 
{
началась программа
закончилась программа
}


