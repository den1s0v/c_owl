{
"algorithm": [

    {"alternative":"по_цвету", "branches": [
            {"if": "сейчас_красный", "then": [
                "ждать"
            ]},
            {"else if": "сейчас_зелёный", "then": [
                "бежать"
            ]},
            {"else": [
                "лежать"
            ]}
        ]
    }
]
}

// алгоритм alg00_alt (развилка по_цвету с 2+1 ветками)
{
если условие (сейчас_красный)  // по_цвету
    ждать
иначе если условие (сейчас_зелёный)
    бежать
иначе
    лежать
}

// alg00_alt 1 (2)
// трасса категории ошибок: IS_containment LinearOrder
{
началась программа
    началась развилка по_цвету 1-й раз  // начало развилки
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему начало развилки должно стоять в указанном месте.
Начало развилки должно стоять в указанном месте, потому что ...
В данном случае развилка является первым оператором программы, поэтому она должна начинаться сразу после начала программы.

**начало развилки** - bold

// alg00_alt 1 (3)
// трасса категории ошибок: Alternative (NoFirstCondition)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина  // проверка условия
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему проверка условия должна стоять в указанном месте.
Проверка условия должна стоять в указанном месте, потому что ...
Данное условие является первым в развилке, поэтому она должна выполняться сразу после начала развилки.

// alg00_alt 1 (4) начало ветки
// трасса категории ошибок: Alternative (NoBranchWhenConditionIsTrue)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз  // начало ветки
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему начало ветки должно стоять в указанном месте.
Начало ветки должно стоять в указанном месте, потому что ...
В данном случае ветка относится к истинному условию, поэтому она должна начинаться сразу после успешной проверки своего условия.

// alg00_alt 1 (5) акт ветки
// трасса категории ошибок: IS_containment LinearOrder
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз   // акт "ждать"
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему акт "ждать" должен стоять в указанном месте.
Акт "ждать" должен стоять в указанном месте, потому что ...
В данном случае действие "ждать" является первым и единственным действием ветки условия ("сейчас_красный"), поэтому его акт должен начинаться сразу после начала этой ветки.

// alg00_alt 1 (6) конец ветки
// трасса категории ошибок: SeqA_contains_B LinearOrder
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз  // конец ветки
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему конец ветки должен стоять в указанном месте.
Конец ветки должен стоять в указанном месте, потому что ...
В данном случае действие "ждать" является единственным и последним действием ветки условия ("сейчас_красный"), поэтому сразу после акта "ждать" эта ветка должна заканчиваться.

// alg00_alt 1 (7) конец развилки
// трасса категории ошибок: Alternative (NextConditionAfterTrueCondition)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз  // конец развилки
закончилась программа
}
Объясните, почему конец развилки должен стоять в указанном месте.
В данном случае условие (сейчас_красный) является единственным и последним истинным условием развилки, поэтому сразу после завершения соответствующей ветки развилка должна заканчиваться.

// alg00_alt 1 (8) конец программы
// трасса категории ошибок: SeqA_contains_B LinearOrder
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа  // конец программы
}
Объясните, почему конец программы должен стоять в указанном месте.
Конец программы должен стоять в указанном месте, потому что ...
В данном случае развилка "по_цвету" является единственным и последним действием в программе, поэтому сразу после конца развилки программа должна заканчиваться.


// alg00_alt 01 (3)
// трасса категории ошибок: Alternative (NoFirstCondition)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь  // проверка условия
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
        ветка условия (сейчас_зелёный) началась 1-й раз
            бежать выполнилось 1-й раз 
        ветка условия (сейчас_зелёный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему проверка условия должна стоять в указанном месте.
Проверка условия должна стоять в указанном месте, потому что ...
Данное условие является первым в развилке, поэтому она должна выполняться сразу после начала развилки.

// alg00_alt 01 (4) проверка 2-го условия
// трасса категории ошибок: Alternative (BranchWithFalseCondition)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - истина  // проверка условия
        ветка условия (сейчас_зелёный) началась 1-й раз
            бежать выполнилось 1-й раз 
        ветка условия (сейчас_зелёный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему проверка условия "сейчас_зелёный" должна стоять в указанном месте.
Проверка условия должна стоять в указанном месте, потому что ...
В данном случае, условие "сейчас_красный" ложно, и следующим по порядку условием развилки является условие "сейчас_зелёный", поэтому оно должно проверяться сразу после неудачи в предыдущем условии.


// alg00_alt 00 (4) проверка 2-го условия
// трасса категории ошибок: Alternative (BranchWithFalseCondition)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь  // проверка условия
        ветка иначe началась 1-й раз
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему проверка условия "сейчас_зелёный" должна стоять в указанном месте.
Проверка условия должна стоять в указанном месте, потому что ...
В данном случае, условие "сейчас_красный" провалилось (ложно), и следующим по порядку условием развилки является условие "сейчас_зелёный", поэтому оно должно проверяться сразу после неудачи в предыдущем условии.

// alg00_alt 00 (5) начало ветки "иначe"
// трасса категории ошибок: Alternative (AllFalseNoElse)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь
        ветка иначe началась 1-й раз  // начало ветки "иначe"
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему начало ветки "иначe" должно стоять в указанном месте.
Начало ветки "иначе" должно стоять в указанном месте, потому что ...
В данном случае, ветка "иначе" присутствует в развилке, и ни одно из условий развилки не сработало (все ложны), поэтому альтернативная ветка (или ветка "иначe") должна начинаться сразу после проверки всех условий.

// alg00_alt 00 (8)
// трасса категории ошибок: Alternative (AllFalseNoElse)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь
        ветка иначe началась 1-й раз
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз  // конец развилки
закончилась программа
}
Объясните, почему конец развилки должен стоять в указанном месте.
Конец развилки должен стоять в указанном месте, потому что ...
В данном случае все условия ложны, закончилась ветка "иначе", которая всегда выполняется в последнюю очередь, поэтому сразу после завершения ветки "иначе" развилка должна закончиться.



// ====================================
{
"algorithm": [

    {"alternative":"по_цвету", "branches": [
            {"if": "сейчас_красный", "then": [
                "ждать"
            ]},
            {"else if": "сейчас_зелёный", "then": [
                "бежать"
            ]}
        ]
    }
]
}

// алгоритм alg01_alt (развилка по_цвету с 2+0 ветками)
{
если условие (сейчас_красный)  // по_цвету
    ждать
иначе если условие (сейчас_зелёный)
    бежать
}


// alg01_alt 00 (5) конец развилки
// трасса  категории ошибок: Alternative (DuplicateOfCondition)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь
    закончилась развилка по_цвету 1-й раз  // конец развилки
закончилась программа
}
Объясните, почему конец развилки должен стоять в указанном месте.
Конец развилки должен стоять в указанном месте, потому что ...
В данном случае все условия ложны и ветка "иначе" отсутствует, поэтому после проверки всех своих условий развилка должна закончиться.


// alg01_alt 00 (6)
// трасса категории ошибок: SeqA_contains_B LinearOrder
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь
    закончилась развилка по_цвету 1-й раз
закончилась программа  // конец программы
}
Объясните, почему конец программы должен стоять в указанном месте.
Конец программы должен стоять в указанном месте, потому что ...
В данном случае развилка "по_цвету" является единственным и последним действием в программе, поэтому сразу после конца развилки программа должна заканчиваться.



// ====================================
{
"algorithm": [

    {"alternative":"по_цвету", "branches": [
            {"if": "сейчас_красный", "then": [
                "ждать"
            ]}
        ]
    }
]
}

// алгоритм alg02_alt (развилка по_цвету с 1+0 ветками)
{
если условие (сейчас_красный)  // по_цвету
    ждать
}


// alg02_alt 1 (4) начало ветки
// трасса  категории ошибок: Alternative (NoBranchWhenConditionIsTrue)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз  // начало ветки
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему начало ветки должно стоять в указанном месте.
Начало ветки должно стоять в указанном месте, потому что ...
В данном случае ветка относится к истинному условию, поэтому она должна начаться сразу после успешной проверки своего условия.



// alg02_alt 1 (7)
// трасса  категории ошибок: Alternative (NextConditionAfterTrueCondition)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз  // конец развилки
закончилась программа
}
Объясните, почему конец развилки должен стоять в указанном месте.
Конец развилки должен стоять в указанном месте, потому что ...
В данном случае условие (сейчас_красный) успешно (истинно), поэтому сразу после завершения соответствующей ветки развилка должна заканчиваться.
// === alg00_alt 1 (7)


// alg02_alt 0 (4) конец развилки
// трасса  категории ошибок: Alternative (DuplicateOfCondition)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
    закончилась развилка по_цвету 1-й раз  // конец развилки
закончилась программа
}
Объясните, почему конец развилки должен стоять в указанном месте.
Конец развилки должен стоять в указанном месте, потому что ...
В данном случае единственное условие развилки ложно, и ветка "иначе" отсутствует, поэтому сразу после проверки условия развилка должна закончиться.








// ====================================
// ====================================
// ====================================
// ====================================
// ====================================

{
"algorithm": [
	{"func":"main", "is_entry":"true", "param_list":[], "body": [
			"делай_раз",
			"делай_два",
			"делай_три"
		]
	}
]
}

// алгоритм alg03_seq3 (следование из 3 действий)
функция main
{
    делай_раз
    делай_два
    делай_три
}

// alg03_seq3 - (2)
// трасса  категории ошибок: SeqA_contains_B IS_containment
{
началась программа
началась функция main 1-й раз  // начало функции main
    делай_раз выполнилось 1-й раз 
    делай_два выполнилось 1-й раз 
    делай_три выполнилось 1-й раз 
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему начало функции main должно стоять в указанном месте.
Начало функции main должно стоять в указанном месте, потому что ...
Функция main вызывается автоматически, т.к. это точка входа в программу, поэтому функция main должна начинаться сразу после начала программы.

// alg03_seq3 - (3)
// трасса  категории ошибок: SeqA_contains_B IS_containment LinearOrder
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз  // акт "делай_раз"
    делай_два выполнилось 1-й раз 
    делай_три выполнилось 1-й раз 
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему акт "делай_раз" должен стоять в указанном месте.
Акт "делай_раз" должен стоять в указанном месте, потому что ...
В данном случае действие "делай_раз" является первым в функции main, поэтому его акт должен начинаться сразу после начала этой функции.

// alg03_seq3 - (4)
// трасса  категории ошибок: SeqA_contains_B IS_containment LinearOrder
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз  // акт "делай_два"
    делай_три выполнилось 1-й раз 
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему акт "делай_два" должен стоять в указанном месте.
Акт "делай_два" должен стоять в указанном месте, потому что ...
В рамках последовательности (тела функции main) действие "делай_два" следует сразу за действием "делай_раз", поэтому акт "делай_два" должен начинаться сразу после акта "делай_раз".

// alg03_seq3 - (5)
// трасса  категории ошибок: SeqA_contains_B IS_containment LinearOrder
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
    делай_три выполнилось 1-й раз  // акт "делай_три"
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему акт "делай_три" должен стоять в указанном месте.
Акт "делай_три" должен стоять в указанном месте, потому что ...
В рамках последовательности (тела функции main) действие "делай_три" следует сразу за действием "делай_два", поэтому акт "делай_три" должен начинаться сразу после акта "делай_два".

// alg03_seq3 - (6)
// трасса  категории ошибок: SeqA_contains_B IS_containment LinearOrder
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз  // конец функции main
закончилась программа
}
Объясните, почему конец функции main должен стоять в указанном месте.
Конец функции main должен стоять в указанном месте, потому что ...
Действие "делай_три" является последним в функции main, поэтому функция main должна заканчиваться сразу после акта "делай_три".


// alg03_seq3 - (7)
// трасса  категории ошибок: IS_containment
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа  // конец программы
}
Объясните, почему конец программы должен стоять в указанном месте.
Конец программы должен стоять в указанном месте, потому что ...
Функция main - это точка входа в программу и функция, в которой проходит всё время выполнения программы, поэтому после завершения функции main должна заканчиваться и вся программа.


