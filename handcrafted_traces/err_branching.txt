{
"algorithm": [

    {"alternative":"по_цвету", "branches": [
            {"if": "сейчас_красный", "then": [
                "ждать"
            ]},
            {"else if": "сейчас_зелёный", "then": [
                "бежать"
            ]},
            {"else": [
                "лежать"
            ]}
        ]
    }
]
}

// алгоритм alg00_alt (развилка по_цвету с 2+1 ветками)
{
если условие (сейчас_красный)  // по_цвету
    ждать
иначе если условие (сейчас_зелёный)
    бежать
иначе
    лежать
}

                            ==== 00 ====

// alg00_alt 00 AllFalseNoElse (с.5) Конец развилки вместо else
// трасса категории ошибок: Alternative (AllFalseNoElse)
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь
    закончилась развилка по_цвету 1-й раз  // ошибка AllFalseNoElse
закончилась программа
}
Объясните, почему наличие конца развилки в указанном месте ошибочно.
Наличие конца развилки в указанном месте ошибочно, потому что ...
Развилка "по_цвету" еще не закончится, т.к., если все условия ложны, то развилка должна выполнить ветку "иначе" (при ее наличии).


/*
alg00_alt 00 NoFirstCondition-1 (с.3) Пропущено первое условие
трасса категории ошибок: Alternative (NoFirstCondition)
*/
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь  // ошибки TooEarly, NoFirstCondition
        ветка иначe началась 1-й раз
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно.
Наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно, потому что ...
// В данном случае, первым условием в развилке является "сейчас_красный", поэтому сразу после начала развилки должно было выполниться оно, а не второе условие "сейчас_зелёный".
Второе условие "сейчас_зелёный" проверять рано, т.к. сначала развилка должна выполнить своё первое условие ("сейчас_красный").

/*
alg00_alt 00 NoFirstCondition-2 (с.3) Пропущены оба условия
трасса категории ошибок: Alternative (NoFirstCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        ветка иначe началась 1-й раз  // ошибки TooEarly, NoFirstCondition
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, первым условием в развилке является "сейчас_красный", поэтому сразу после начала развилки должно было выполниться оно, а не начало ветки "иначe".
// Ветку "иначe" выполнять рано, т.к. сначала развилка должна выполнить все свои условия ("сейчас_красный" и "сейчас_зелёный"), и все условия должны оказаться ложными.
Ветку "иначе" выполнять рано: сначала должны быть проверены все условия. В данном случае не проверено ни одно условие.

/*
alg00_alt 00 DuplicatesOfBranch (с.8) Начало второй ветки "иначе"
трасса категории ошибок: Alternative (DuplicatesOfBranch) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь
        ветка иначe началась 1-й раз
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
        ветка иначe началась 2-й раз  // ошибка ExtraAct (??)
            лежать выполнилось 2-й раз 
        ветка иначe закончилась 2-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, ветка "иначe" уже выполнилась ранее, поэтому сразу после первого завершения ветки "иначe" должна была завершиться вся развилка.
Ветка "иначe" не начнётся повторно, т.к. она уже выполнилась, а за один раз может выполниться не более одной ветки развилки.



/*
alg00_alt 00 BranchWithFalseCondition-1 (с.4) Начало ветки при ложном условии
трасса категории ошибок: Alternative (BranchWithFalseCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        ветка условия (сейчас_красный) началась 1-й раз  // ошибки BranchOfFalseCondition, NoNextCondition
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки "сейчас_красный" в указанном месте ошибочно.
Наличие начала ветки "сейчас_красный" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" не сработало (ложно), поэтому соответствующая ветка не должна была начаться.
Ветка условия "сейчас_красный" не выполнится, т.к. условие "сейчас_красный" ложно. Условная ветка выполняется только если её условие истинно.


/*
alg00_alt 00 BranchWithFalseCondition-2 (с.5) Начало ветки при ложном условии
трасса категории ошибок: Alternative (BranchWithFalseCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь
        ветка условия (сейчас_зелёный) началась 1-й раз  // ошибки BranchOfFalseCondition, AllFalseNoElse
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_зелёный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки "сейчас_зелёный" в указанном месте ошибочно.
Наличие начала ветки "сейчас_зелёный" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_зелёный" не сработало (ложно), поэтому соответствующая ветка не должна была начаться.
Ветка условия "сейчас_зелёный" не выполнится, т.к. условие "сейчас_зелёный" ложно. Условная ветка выполняется только если её условие истинно.


/*
alg00_alt 00 NoNextCondition-1 (с.4) Пропущено второе условие
трасса категории ошибок: Alternative (NoNextCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        ветка иначe началась 1-й раз  // ошибки TooEarly, NoNextCondition
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" не сработало (ложно), и существует следующее по порядку условие "сейчас_зелёный", поэтому должно было провериться условие "сейчас_зелёный", а не выполниться ветка "иначe".
// Ветка "иначе" не начнётся, т.к. второе условие развилки "сейчас_зелёный" не было проверено: развилка выполняет ветку "иначe", если все условия вычислены и ложны.
Ветку "иначе" выполнять рано: сначала должны быть проверены все условия. В данном случае не проверено условие "сейчас_зелёный".


/*
alg00_alt 00 NoNextCondition-2 (с.4) Конец развилки вместо второго условия
трасса категории ошибок: Alternative (NoNextCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
    закончилась развилка по_цвету 1-й раз  // ошибка NoNextCondition
закончилась программа
}
Объясните, почему наличие конца развилки в указанном месте ошибочно.
Наличие конца развилки в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" не сработало (ложно), и существует следующее по порядку условие "сейчас_зелёный", поэтому должно было провериться условие "сейчас_зелёный", а не завершиться развилка.
Развилка "по_цвету" еще не закончится, а проверится второе условие ("сейчас_зелёный"): развилка должна проверять условия по порядку, пока не встретится истинное или условия не кончатся.



/*
alg00_alt 00 DuplicateOfCondition-1 (с.4) Повтор первого условия
трасса категории ошибок: Alternative (DuplicateOfCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_красный) выполнилось 2-й раз - ложь  // ошибки ExtraAct, NoNextCondition
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь
        ветка иначe началась 1-й раз
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие проверки условия "сейчас_красный" в указанном месте ошибочно.
Наличие проверки условия "сейчас_красный" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" уже проверено строкой выше, поэтому следующим должно было выполниться условие "сейчас_зелёный", а не повториться условие "сейчас_красный".
Условие "сейчас_красный" проверяется лишний раз: развилка должна проверять условия одно за одним, пока не встретится истинное или условия не кончатся.


/*
alg00_alt 00 DuplicateOfCondition-2 (с.5) Повтор второго условия
трасса категории ошибок: Alternative (DuplicateOfCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 2-й раз - ложь  // ошибки ExtraAct, AllFalseNoElse
        ветка иначe началась 1-й раз
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно.
Наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_зелёный" уже проверено строкой выше, поэтому следующей должна была выполниться ветка "иначe", а не повториться проверка условия "сейчас_зелёный".
Условие "сейчас_зелёный" проверяется лишний раз: развилка должна проверять условия одно за одним, пока не встретится истинное (тогда выполнится ветка истинного условия) или пока условия не кончатся (тогда, при ее наличии, выполнится ветка "иначе").


/*
alg00_alt 00 ConditionsMisorder (с.3) Второе условие вместо первого
трасса категории ошибок: Alternative (ConditionsMisorder) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь  // ошибки NoFirstCondition, DisplacedAct
        условие (сейчас_красный) выполнилось 1-й раз - ложь  // ошибки AllFalseNoElse, DisplacedAct
        ветка иначe началась 1-й раз  // ошибки TooEarly, NoNextCondition
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно.
Наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно, потому что ...
// В данном случае, условия "сейчас_зелёный" и "сейчас_красный" проверяются в неправильном порядке. Так как по алгоритму первым стоит "сейчас_красный", а "сейчас_зелёный" - после него, то сначала должна была выполниться проверка условия "сейчас_красный", а только после этого - проверка условия "сейчас_зелёный".
Второе условие "сейчас_зелёный" проверять рано, т.к. первое условие "сейчас_красный" ещё не проверено: развилка должна проверять условия по порядку, начиная с первого (и пока не встретится истинное или условия не кончатся).


/*
alg00_alt 00 BranchBeforeCondition-1 (с.4) Ветка "иначе" не в конце развилки
трасса категории ошибок: Alternative (BranchBeforeCondition, ConditionAfterBranch) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        ветка иначe началась 1-й раз  // ошибки ExtraAct, TooEarly, NoNextCondition
            лежать выполнилось 1-й раз  // ошибка ExtraAct
        ветка иначe закончилась 1-й раз  // ошибка ExtraAct
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь  // ошибка MissingAct (???)
    закончилась развилка по_цвету 1-й раз  // ошибка AllFalseNoElse
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" не сработало (ложно), но в развилке есть ещё не проверенные условия ("сейчас_зелёный"), поэтому нужно проверить их, а не пытаться выполнять ветку "иначe" раньше времени.
// Ветка "иначе" не начнётся, т.к. второе условие развилки "сейчас_зелёный" не было проверено: развилка выполняет ветку "иначe" (при ее наличии), если все условия вычислены и ложны.
Ветку "иначе" выполнять рано: сначала должны быть проверены все условия. В данном случае не проверено условие "сейчас_зелёный".


/*
alg00_alt 00 BranchBeforeCondition-2 (с.3) Ветка "иначе" в начале развилки
трасса категории ошибок: Alternative (BranchBeforeCondition, ConditionAfterBranch) */
{
началась программа
    началась развилка по_цвету 1-й раз
        ветка иначe началась 1-й раз  // ошибки ExtraAct, TooEarly, NoFirstCondition
            лежать выполнилось 1-й раз  // ошибка ExtraAct
        ветка иначe закончилась 1-й раз  // ошибка ExtraAct
        условие (сейчас_красный) выполнилось 1-й раз - ложь  // ошибка MissingAct
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь  // ошибка MissingAct, NoNextCondition
    закончилась развилка по_цвету 1-й раз  // ошибка AllFalseNoElse
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, в развилке есть непроверенные условия ("сейчас_красный" и "сейчас_зелёный"), поэтому нужно проверить их, а не пытаться выполнять ветку "иначe" раньше времени.
Ветку "иначе" выполнять рано: сначала должны быть проверены все условия. В данном случае ещё не проверено ни одно условие развилки "по_цвету".


                            ==== 01 ====

/*
alg00_alt 01 NoBranchWhenConditionIsTrue (с.5) Пропущена вторая ветка
трасса категории ошибок: Alternative (NoBranchWhenConditionIsTrue) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
    закончилась развилка по_цвету 1-й раз  // ошибка NoBranchWhenConditionIsTrue
закончилась программа
}
Объясните, почему наличие конца развилки в указанном месте ошибочно.
Наличие конца развилки в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_зелёный" сработало (истинно), поэтому должна была выполниться ветка условия "сейчас_зелёный", а не завершиться развилка.
Развилка "по_цвету" еще не закончится, т.к. есть истинное условие (сейчас_зелёный), и развилка должна ещё выполнить ветку истинного условия.


/*
alg00_alt 01 ElseBranchWhenTrueConditionExists-1 (с.8) Ветка иначe после условной ветки
трасса категории ошибок: Alternative (ElseBranchWhenTrueConditionExists) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
        ветка условия (сейчас_зелёный) началась 1-й раз
            бежать выполнилось 1-й раз 
        ветка условия (сейчас_зелёный) закончилась 1-й раз
        ветка иначe началась 1-й раз  // ошибка !!
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, ветка условия "сейчас_зелёный" выполнилась ранее благодаря сработавшему условию "сейчас_зелёный", поэтому сразу после завершения этой ветки должна была завершиться вся развилка, а не начаться ещё одна ветка.
Ветка "иначe" не выполнится, т.к. есть истинное условие (сейчас_зелёный). Ветка истинного условия выполнилась, и вслед за этим должна закончиться и вся развилка "по_цвету".


/*
alg00_alt 01 ElseBranchWhenTrueConditionExists-2 (с.5) Ветка иначe вместо условной ветки
трасса категории ошибок: Alternative (ElseBranchWhenTrueConditionExists) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
        ветка иначe началась 1-й раз  // ошибка NoBranchWhenConditionIsTrue
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_зелёный" сработало (истинно), поэтому сразу после проверки этого условия должна была выполниться ветка условия "сейчас_зелёный", а не ветка "иначe".
Ветка "иначe" не выполнится, т.к. в развилке "по_цвету" есть истинное условие (сейчас_зелёный) и должна выполниться ветка истинного условия.



/*
alg00_alt 01 DuplicateOfCondition-1 (с.4) Повтор первого условия
трасса категории ошибок: Alternative (DuplicateOfCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_красный) выполнилось 2-й раз - ложь  // ошибки ExtraAct, NoNextCondition
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
        ветка условия (сейчас_зелёный) началась 1-й раз
            бежать выполнилось 1-й раз 
        ветка условия (сейчас_зелёный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие проверки условия "сейчас_красный" в указанном месте ошибочно.
Наличие проверки условия "сейчас_красный" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" уже проверено строкой выше, поэтому следующим должно было выполниться условие "сейчас_зелёный", а не повториться условие "сейчас_красный".
Условие "сейчас_красный" проверяется лишний раз: развилка должна проверять условия одно за одним до первого истинного (или пока условия не кончатся).


/*
alg00_alt DuplicateOfCondition-2 (с.5) Повтор второго условия
трасса категории ошибок: Alternative (DuplicateOfCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
        условие (сейчас_зелёный) выполнилось 2-й раз - истина  // ошибки ExtraAct, NoBranchWhenConditionIsTrue
        ветка условия (сейчас_зелёный) началась 1-й раз
            бежать выполнилось 1-й раз 
        ветка условия (сейчас_зелёный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно.
Наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_зелёный" уже проверено строкой выше, поэтому следующей должна была начаться ветка условия "сейчас_зелёный", а не повториться проверка условия "сейчас_зелёный".
Условие "сейчас_зелёный" проверяется лишний раз: развилка должна проверять условия одно за одним до первого истинного (или пока условия не кончатся).


/* alg00_alt ConditionsMisorder (с.3) Второе условие вместо первого
трасса категории ошибок: Alternative (ConditionsMisorder) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь  // ошибки ExtraAct, NoFirstCondition
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно.
Наличие проверки условия "сейчас_зелёный" в указанном месте ошибочно, потому что ...
// В данном случае, условия "сейчас_зелёный" и "сейчас_красный" проверяются в неправильном порядке. Так как по алгоритму первым стоит "сейчас_красный", а "сейчас_зелёный" - после него, то сначала должна была выполниться проверка условия "сейчас_красный", а только после этого - проверка условия "сейчас_зелёный".
Второе условие "сейчас_зелёный" проверять рано, т.к. первое условие "сейчас_красный" ещё не проверено: развилка должна проверять условия по порядку, начиная с первого (и до первого истинного).


/*
alg00_alt BranchBeforeCondition-1 (с.4) Ветка до условия
трасса категории ошибок: Alternative (BranchBeforeCondition, ConditionAfterBranch) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        ветка условия (сейчас_зелёный) началась 1-й раз  // ошибка NoBranchWhenConditionIsTrue
            бежать выполнилось 1-й раз 
        ветка условия (сейчас_зелёный) закончилась 1-й раз
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
    закончилась развилка по_цвету 1-й раз  // ошибка NoBranchWhenConditionIsTrue
закончилась программа
}
Объясните, почему наличие начала ветки условия "сейчас_зелёный" в указанном месте ошибочно.
Наличие начала ветки условия "сейчас_зелёный" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" не сработало (ложно), но условие "сейчас_зелёный" ещё не проверено, поэтому нужно сначала проверить его, прежде чем пытаться выполнять ветку условия "сейчас_зелёный".
Ветку условия "сейчас_зелёный" выполнять рано: сначала должно быть проверено условие "сейчас_зелёный".



/*
alg00_alt 01 BranchBeforeCondition-2 (с.3) Ветка "иначе" в начале развилки
трасса категории ошибок: Alternative (BranchBeforeCondition, ConditionAfterBranch) */
{
началась программа
    началась развилка по_цвету 1-й раз
        ветка иначe началась 1-й раз  // ошибки ExtraAct, NoFirstCondition
            лежать выполнилось 1-й раз   // ошибка MissngiAct
        ветка иначe закончилась 1-й раз   // ошибка MissngiAct
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
    закончилась развилка по_цвету 1-й раз  // ошибка NoBranchWhenConditionIsTrue
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, в развилке есть непроверенные условия ("сейчас_красный" и "сейчас_зелёный"), поэтому нужно сначала проверить их, а не пытаться выполнять ветку "иначe" раньше времени.
Ветку "иначе" выполнять рано: сначала должны быть проверены все условия. В данном случае ещё не проверено ни одно условие развилки "по_цвету".



                            ==== 1 ====

/*
alg00_alt 1 DuplicatesOfBranch (с.7) Повтор условной ветки
трасса категории ошибок: Alternative (DuplicatesOfBranch) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
        ветка условия (сейчас_красный) началась 2-й раз  // ошибка !
            ждать выполнилось 2-й раз 
        ветка условия (сейчас_красный) закончилась 2-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки условия "сейчас_красный" в указанном месте ошибочно.
Наличие начала ветки условия "сейчас_красный" в указанном месте ошибочно, потому что ...
// В данном случае, ветка условия "сейчас_красный" уже выполнилась ранее, поэтому сразу после первого завершения ветки условия "сейчас_красный" должна была завершиться вся развилка.
Ветка условия "сейчас_красный" выполнется лишний раз: развилка всегда выполняет не более одной ветки, после чего завершается сама.


/*
alg00_alt 1 NoBranchWhenConditionIsTrue (с.4) Пропущена первая ветка
трасса категории ошибок: Alternative (NoBranchWhenConditionIsTrue) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
    закончилась развилка по_цвету 1-й раз  // ошибка !
закончилась программа
}
Объясните, почему наличие конца развилки в указанном месте ошибочно.
Наличие конца развилки в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" сработало (истинно), поэтому должна была выполниться ветка условия "сейчас_красный", а не завершиться развилка.
Развилка "по_цвету" еще не закончится, т.к. есть истинное условие (сейчас_красный), и развилка должна ещё выполнить ветку истинного условия.


/*
alg00_alt 1 NextConditionAfterTrueCondition (с.7) Лишнее следующее условие
трасса категории ошибок: Alternative (NextConditionAfterTrueCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
        условие (сейчас_зелёный) выполнилось 1-й раз - ложь  // ошибка !
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие условия "сейчас_зелёный" в указанном месте ошибочно.
Наличие условия "сейчас_зелёный" в указанном месте ошибочно, потому что ...
// В данном случае, ветка истинного условия "сейчас_красный" выполнилась, после чего должна была завершиться вся развилка, а не проверяться условие "сейчас_зелёный".
Проверка второго условия "сейчас_зелёный" не выполнится, т.к. первое условие уже истинно, и дальнейшие условия развилки не должны проверяться.


/*
alg00_alt 1 ElseBranchWhenTrueConditionExists-1 (с.7) Ветка иначe после условной ветки
трасса категории ошибок: Alternative (ElseBranchWhenTrueConditionExists) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
        ветка иначe началась 1-й раз  // ошибка !
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, ветка условия "сейчас_красный" выполнилась ранее благодаря сработавшему условию "сейчас_красный", поэтому сразу после завершения этой ветки должна была завершиться вся развилка, а не начаться ещё одна ветка.
Ветка "иначe" не выполнится, т.к. есть истинное условие (сейчас_красный). Ветка истинного условия выполнилась, и вслед за этим должна закончиться и вся развилка "по_цвету".


/*
alg00_alt 1 ElseBranchWhenTrueConditionExists-2 (с.4) Ветка иначe вместо условной ветки
трасса категории ошибок: Alternative (NoBranchWhenConditionIsTrue, ElseBranchWhenTrueConditionExists) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        ветка иначe началась 1-й раз  // ошибка !
            лежать выполнилось 1-й раз 
        ветка иначe закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки "иначe" в указанном месте ошибочно.
Наличие начала ветки "иначe" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" сработало (истинно), поэтому сразу после проверки этого условия должна была выполниться ветка условия "сейчас_красный", а не ветка "иначe".
Ветка "иначe" не выполнится, т.к. в развилке "по_цвету" есть истинное условие (сейчас_красный) и должна выполниться ветка истинного условия.


/*
alg00_alt 1 DuplicateOfCondition (с.4) Повтор первого условия
трасса категории ошибок: Alternative (DuplicateOfCondition) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
        условие (сейчас_красный) выполнилось 2-й раз - истина  // ошибка !
        ветка условия (сейчас_красный) началась 1-й раз
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие проверки условия "сейчас_красный" в указанном месте ошибочно.
Наличие проверки условия "сейчас_красный" в указанном месте ошибочно, потому что ...
// В данном случае, условие "сейчас_красный" уже проверено строкой выше, поэтому следующим должна была начаться ветка условия "сейчас_красный", а не повториться условие "сейчас_красный".
Условие "сейчас_красный" проверяется лишний раз: развилка должна проверять условия одно за одним до первого истинного (или пока условия не кончатся).


/*
alg00_alt 1 BranchBeforeCondition-1 (с.3) Ветка до условия
трасса категории ошибок: Alternative (BranchBeforeCondition, ConditionAfterBranch) */
{
началась программа
    началась развилка по_цвету 1-й раз
        ветка условия (сейчас_красный) началась 1-й раз  // ошибка !
            ждать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - истина
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки условия "сейчас_красный" в указанном месте ошибочно.
Наличие начала ветки условия "сейчас_красный" в указанном месте ошибочно, потому что ...
// В данном случае, первое условие развилки ("сейчас_красный") ещё не проверено, поэтому сначала нужно проверить его, а не пытаться выполнять ветку условия "сейчас_красный" раньше времени.
Ветку условия "сейчас_красный" выполнять рано: сначала должно быть проверено условие "сейчас_красный".


/* 
alg00_alt 01 BranchWithFalseCondition (с.5) Начало ветки при ложном условии
трасса категории ошибок: Alternative (BranchWithFalseCondition, NoBranchWhenConditionIsTrue) */
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз  // ошибка !
            бежать выполнилось 1-й раз 
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие начала ветки условия "сейчас_красный" в указанном месте ошибочно.
Наличие начала ветки условия "сейчас_красный" в указанном месте ошибочно, потому что ...
// В данном случае, второе условие развилки ("сейчас_зелёный") сработало (истинно), поэтому должна была выполниться его ветка, а не ветка другого условия ("сейчас_красный", как в данном случае).
Ветка условия "сейчас_красный" не выполнится, т.к. условие "сейчас_красный" ложно. Условная ветка выполняется только если её условие истинно.

/* 
alg00_alt 01 MisplacedWithout (с.6) Действие из другой ветки
трасса категории ошибок: IS_containment (MisplacedWithout)
*/
{
началась программа
    началась развилка по_цвету 1-й раз
        условие (сейчас_красный) выполнилось 1-й раз - ложь
        условие (сейчас_зелёный) выполнилось 1-й раз - истина
        ветка условия (сейчас_красный) началась 1-й раз
            бежать выполнилось 1-й раз  // ошибка !
        ветка условия (сейчас_красный) закончилась 1-й раз
    закончилась развилка по_цвету 1-й раз
закончилась программа
}
Объясните, почему наличие акта "бежать" в указанном месте ошибочно.
Наличие акта "бежать" в указанном месте ошибочно, потому что ...
// В данном случае, действие "бежать" ясляется частью ветки второго условия ("сейчас_зелёный"), поэтому акт "бежать" должен был выполниться в контексте своей ветки (или не выполниться вообще), а не оказаться в рамках ветки другого условия ("сейчас_красный", как в данном случае).
Акт "бежать" не может выполняться в рамках ветки "сейчас_красный", т.к. он относится к ветке условия "сейчас_зелёный".





... другие формы развилки ...
        2+0
        1+0



// ====================================
// ====================================
// ====================================
// ====================================
// ====================================

{
"algorithm": [
	{"func":"main", "is_entry":"true", "param_list":[], "body": [
        {"alternative":"по_направлению", "branches": [
                {"if": "налево", "then": [
                    "прыгать"
                ]},
                {"else if": "направо", "then": [
                    "бегать"
                ]}
            ]
        },
        "отдыхать"
    ]}
]
}


// размяться по_направлению налево направо прыгать бегать отдыхать
 
// алгоритм alg04_alt
функция main
{
    если налево  // по_направлению
        прыгать
    иначе если направо
        бегать
    отдыхать
}

/* 
alg04_alt 00 MisplacedDeeper-1 (с.6) Последующий акт попал в развилку
трасса категории ошибок: IS_containment (MisplacedDeeper) */
{
началась программа
началась функция main 1-й раз
    началась развилка по_направлению 1-й раз
        условие (налево) выполнилось 1-й раз - ложь
        условие (направо) выполнилось 1-й раз - ложь
        отдыхать выполнилось 1-й раз  // ошибка !
    закончилась развилка по_направлению 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "отдыхать" в указанном месте ошибочно.
Наличие акта "отдыхать" в указанном месте ошибочно, потому что ...
// В данном случае, действие "отдыхать" содержится непосредственно в теле функции main (после развилки "по_направлению"), поэтому акт "отдыхать" должен быть непосредственно вложен в акт функции main, а не в другой акт (в данном случае, развилка "по_направлению").
Акт "отдыхать" не может выполняться в рамках развилки "по_направлению", т.к. он относится к функции main.

/* 
alg04_alt 1 MisplacedDeeper-2 (с.8) Последующий акт попал в развилку
трасса категории ошибок: IS_containment (MisplacedDeeper) */
{
началась программа
началась функция main 1-й раз
    началась развилка по_направлению 1-й раз
        условие (налево) выполнилось 1-й раз - истина
        ветка условия (налево) началась 1-й раз
            прыгать выполнилось 1-й раз
            отдыхать выполнилось 1-й раз  // ошибка !
        ветка условия (налево) закончилась 1-й раз
    закончилась развилка по_направлению 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "отдыхать" в указанном месте ошибочно.
Наличие акта "отдыхать" в указанном месте ошибочно, потому что ...
// В данном случае, действие "отдыхать" содержится непосредственно в теле функции main (после развилки "по_направлению"), поэтому акт "отдыхать" должен быть непосредственно вложен в акт функции main, а не в другой акт (в данном случае, ветка развилки "по_направлению").
Акт "отдыхать" не может выполняться в рамках ветки развилки "по_направлению", т.к. он относится к функции main.


/* 
alg04_alt 01 MisplacedDeeper-3 (с.6) Последующий акт попал в развилку
трасса категории ошибок: IS_containment (MisplacedDeeper) */
{
началась программа
началась функция main 1-й раз
    началась развилка по_направлению 1-й раз
        условие (налево) выполнилось 1-й раз - ложь
        условие (направо) выполнилось 1-й раз - истина
        ветка условия (направо) началась 1-й раз
            бегать выполнилось 1-й раз 
            отдыхать выполнилось 1-й раз  // ошибка !
        ветка условия (направо) закончилась 1-й раз
    закончилась развилка по_направлению 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "отдыхать" в указанном месте ошибочно.
Наличие акта "отдыхать" в указанном месте ошибочно, потому что ...
// В данном случае, действие "отдыхать" содержится непосредственно в теле функции main (после развилки "по_направлению"), поэтому акт "отдыхать" должен быть непосредственно вложен в акт функции main, а не в другой акт (в данном случае, ветка развилки "по_направлению").
Акт "отдыхать" не может выполняться в рамках ветки развилки "по_направлению", т.к. он относится к функции main.

/* 
alg04_alt 1 ActsPairMisorder (с.3) Акт и развилка поменялись местами
трасса категории ошибок: LinearOrder (ActsPairMisorder) */
{
началась программа
началась функция main 1-й раз
    отдыхать выполнилось 1-й раз  // ошибка !
    началась развилка по_направлению 1-й раз
        условие (налево) выполнилось 1-й раз - истина
        ветка условия (налево) началась 1-й раз
            прыгать выполнилось 1-й раз
        ветка условия (налево) закончилась 1-й раз
    закончилась развилка по_направлению 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "отдыхать" в указанном месте ошибочно.
Наличие акта "отдыхать" в указанном месте ошибочно, потому что ...
// В данном случае, действие "отдыхать" входит в следование (тело функции main) после развилки "по_направлению", поэтому между началом и концом акта функции main акт "отдыхать" должен выполниться после акта развилки "по_направлению" (а не наоборот, как в данном случае).
Действия, следующие друг за другом, выполняются в том порядке, в котором записаны. В данном случае сначала необходимо выполнить развилку "по_направлению", а затем действие "отдыхать".

/* 
alg04_alt 00 NoNextCondition (с.5) Конец развилки вместо второго условия
трасса категории ошибок: Alternative (NoNextCondition) */
{
началась программа
началась функция main 1-й раз
    началась развилка по_направлению 1-й раз
        условие (налево) выполнилось 1-й раз - ложь
    закончилась развилка по_направлению 1-й раз  // ошибка !
    отдыхать выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие конца развилки в указанном месте ошибочно.
Наличие конца развилки в указанном месте ошибочно, потому что ...
// В данном случае, условие "налево" не сработало (ложно), и существует следующее по порядку условие "направо", поэтому должно было провериться условие "направо", а не завершиться развилка.
Развилка "по_направлению" еще не закончится, а проверится второе условие ("направо"): развилка должна проверять условия по порядку, пока не встретится истинное или условия не кончатся.






// ====================================
// ====================================
// ====================================
// ====================================
// ====================================

{
"algorithm": [
	{"func":"main", "is_entry":"true", "param_list":[], "body": [
			"делай_раз",
			"делай_два",
			"делай_три"
		]
	}
]
}

// алгоритм alg03_seq3 (следование из 3 действий)
функция main
{
    делай_раз
    делай_два
    делай_три
}
/* 
alg03_seq3 MisplacedBefore (с.2) Акт до main
трасса  категории ошибок: IS_containment (MisplacedBefore) */
{
началась программа
делай_раз выполнилось 1-й раз  // ошибка !
началась функция main 1-й раз
    делай_два выполнилось 1-й раз 
    делай_три выполнилось 1-й раз 
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_раз" в указанном месте ошибочно.
Наличие акта "делай_раз" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_раз" входит в следование (тело функции main), поэтому акт "делай_раз" должен располагаться между началом и концом акта функции main, а не вне его (в данном случае, перед ним).
Акт "делай_раз" не может выполняться нигде, кроме функции main.

/* 
alg03_seq3 MisplacedAfter-1 (с.6) Акт после main
трасса  категории ошибок: IS_containment (MisplacedAfter) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз 
закончилась функция main 1-й раз
делай_три выполнилось 1-й раз  // ошибка !
закончилась программа
}
Объясните, почему наличие акта "делай_три" в указанном месте ошибочно.
Наличие акта "делай_три" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_три" входит в следование (тело функции main), поэтому акт "делай_три" должен располагаться между началом и концом акта функции main, а не вне его (в данном случае, после него).
Акт "делай_три" не может выполняться нигде, кроме функции main.

/* 
alg03_seq3 MisplacedAfter-2 (с.3) Акт после main
трасса  категории ошибок: IS_containment (MisplacedAfter) */
{
началась программа
выполнилась функция main 1-й раз
делай_раз выполнилось 1-й раз  // ошибка !
делай_два выполнилось 1-й раз 
делай_три выполнилось 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_раз" в указанном месте ошибочно.
Наличие акта "делай_раз" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_раз" входит в следование (тело функции main), поэтому акт "делай_раз" должен располагаться между началом и концом акта функции main, а не вне его (в данном случае, после него).
Акт "делай_раз" не может выполняться нигде, кроме функции main.

/* 
alg03_seq3 MisplacedBefore (с.3) Акт до main
трасса  категории ошибок: IS_containment (MisplacedBefore) */
{
началась программа
делай_раз выполнилось 1-й раз
делай_два выполнилось 1-й раз  // ошибка !
делай_три выполнилось 1-й раз
выполнилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_два" в указанном месте ошибочно.
Наличие акта "делай_два" в указанном месте ошибочно, потому ч\то ...
// В данном случае, действие "делай_два" входит в следование (тело функции main), поэтому акт "делай_два" должен располагаться между началом и концом акта функции main, а не вне его (в данном случае, перед ним).
Акт "делай_два" не может выполняться нигде, кроме функции main.

/* 
alg03_seq3 MisplacedBeforeAndAfter (с.5) Акт до и после main
трасса  категории ошибок: IS_containment (MisplacedBeforeAndAfter) */
{
началась программа
выполнилась функция main 1-й раз
делай_раз выполнилось 1-й раз
делай_два выполнилось 1-й раз
делай_три выполнилось 1-й раз  // ошибка !
выполнилась функция main 2-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_три" в указанном месте ошибочно.
Наличие акта "делай_три" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_три" входит в следование (тело функции main), поэтому акт "делай_три" должен располагаться между началом и концом акта функции main, а не вне его (в данном случае, после него и перед ним).
Акт "делай_три" не может выполняться нигде, кроме функции main.

/* 
alg03_seq3 MisplacedWithout-1 (с.2) Акт при отсутствии main
трасса  категории ошибок: IS_containment (MisplacedWithout) */
{
началась программа
делай_раз выполнилось 1-й раз  // ошибка !
делай_два выполнилось 1-й раз
делай_три выполнилось 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_раз" в указанном месте ошибочно.
Наличие акта "делай_раз" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_раз" входит в следование (тело функции main), поэтому акт "делай_раз" должен располагаться между началом и концом акта функции main, а не вне его (в данном случае, акт main отсутствует).
Акт "делай_раз" не может выполняться без функции main.

/* 
alg03_seq3 MisplacedWithout-2 (с.3) Акт при отсутствии main
трасса  категории ошибок: IS_containment (MisplacedWithout) */
{
началась программа
делай_раз выполнилось 1-й раз
делай_два выполнилось 1-й раз  // ошибка !
делай_три выполнилось 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_два" в указанном месте ошибочно.
Наличие акта "делай_два" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_два" входит в следование (тело функции main), поэтому акт "делай_два" должен располагаться между началом и концом акта функции main, а не вне его (в данном случае, акт main отсутствует).
Акт "делай_два" не может выполняться без функции main.

/* 
alg03_seq3 MisplacedWithout-3 (с.4) Акт при отсутствии main
трасса  категории ошибок: IS_containment (MisplacedWithout) */
{
началась программа
делай_раз выполнилось 1-й раз
делай_два выполнилось 1-й раз
делай_три выполнилось 1-й раз  // ошибка !
закончилась программа
}
Объясните, почему наличие акта "делай_три" в указанном месте ошибочно.
Наличие акта "делай_три" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_три" входит в следование (тело функции main), поэтому акт "делай_три" должен располагаться между началом и концом акта функции main, а не вне его (в данном случае, акт main отсутствует).
Акт "делай_три" не может выполняться без функции main.

/* 
alg03_seq3 DuplicatesOfAct-1 (с.4) Дубликат в следовании
трасса  категории ошибок: SeqA_contains_B (DuplicatesOfAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_раз выполнилось 2-й раз  // ошибка !
    делай_два выполнилось 1-й раз
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_раз" в указанном месте ошибочно.
Наличие акта "делай_раз" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_раз" входит в следование (тело функции main) один раз, поэтому между началом и концом акта функции main должен присутствовать ровно один акт "делай_раз", а не два (как в данном случае).
За одно выполнение следования каждое действие выполняется один раз.

/* 
alg03_seq3 DuplicatesOfAct-2 (с.5) Дубликат в следовании
трасса  категории ошибок: SeqA_contains_B (DuplicatesOfAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
    делай_два выполнилось 2-й раз  // ошибка !
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_два" в указанном месте ошибочно.
Наличие акта "делай_два" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_два" входит в следование (тело функции main) один раз, поэтому между началом и концом акта функции main должен присутствовать ровно один акт "делай_два", а не два (как в данном случае).
За одно выполнение следования каждое действие выполняется один раз.

/* 
alg03_seq3 DuplicatesOfAct-3 (с.6) Дубликат в следовании
трасса  категории ошибок: SeqA_contains_B (DuplicatesOfAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
    делай_три выполнилось 1-й раз
    делай_три выполнилось 2-й раз  // ошибка !
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_три" в указанном месте ошибочно.
Наличие акта "делай_три" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_три" входит в следование (тело функции main) один раз, поэтому между началом и концом акта функции main должен присутствовать ровно один акт "делай_три", а не два (как в данном случае).
За одно выполнение следования каждое действие выполняется один раз.

/* 
alg03_seq3 DuplicatesOfAct-4 (с.4) Дубликат в следовании
трасса  категории ошибок: SeqA_contains_B (DuplicatesOfAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_раз выполнилось 2-й раз  // ошибка !
    делай_два выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_раз" в указанном месте ошибочно.
Наличие акта "делай_раз" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_раз" входит в следование (тело функции main) один раз, поэтому между началом и концом акта функции main должен присутствовать ровно один акт "делай_раз", а не два (как в данном случае).
За одно выполнение следования каждое действие выполняется один раз.

/* 
alg03_seq3 DuplicatesOfAct-5 (с.4) Дубликат в следовании
трасса  категории ошибок: SeqA_contains_B (DuplicatesOfAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_раз выполнилось 2-й раз  // ошибка !
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_раз" в указанном месте ошибочно.
Наличие акта "делай_раз" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_раз" входит в следование (тело функции main) один раз, поэтому между началом и концом акта функции main должен присутствовать ровно один акт "делай_раз", а не два (как в данном случае).
За одно выполнение следования каждое действие выполняется один раз.

/* 
alg03_seq3 DuplicatesOfAct-6 (с.4) Дубликат в следовании
трасса  категории ошибок: SeqA_contains_B (DuplicatesOfAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_раз выполнилось 2-й раз  // ошибка !
    делай_раз выполнилось 3-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_раз" в указанном месте ошибочно.
Наличие акта "делай_раз" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_раз" входит в следование (тело функции main) один раз, поэтому между началом и концом акта функции main должен присутствовать ровно один акт "делай_раз", а не два (как в данном случае).
За одно выполнение следования каждое действие выполняется один раз.

/* 
alg03_seq3 MissingAct-1 (с.3) Пропущен акт в следовании
трасса  категории ошибок: SeqA_contains_B (MissingAct) */
{
началась программа
началась функция main 1-й раз
    делай_два выполнилось 1-й раз  // ошибка !
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_два" в указанном месте ошибочно.
Наличие акта "делай_два" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_раз" входит в следование (тело функции main) до действия "делай_два", поэтому между началом акта функции main и началом акта "делай_два" должен присутствовать ровно один акт "делай_раз" (который в данном случае отсутствует).
Не хватает акта "делай_раз". За одно выполнение следования каждое действие выполняется один раз.


/* 
alg03_seq3 MissingAct-2 (с.4) Пропущен акт в следовании
трасса  категории ошибок: SeqA_contains_B (MissingAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_три выполнилось 1-й раз  // ошибка !
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_три" в указанном месте ошибочно.
Наличие акта "делай_три" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_два" входит в следование (тело функции main) до действия "делай_три", поэтому между началом акта функции main и началом акта "делай_три" должен присутствовать ровно один акт "делай_два" (который в данном случае отсутствует).
Не хватает акта "делай_два". За одно выполнение следования каждое действие выполняется один раз.

/* 
alg03_seq3 MissingAct-3 (с.5) Пропущен акт в следовании
трасса  категории ошибок: SeqA_contains_B (MissingAct) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_два выполнилось 1-й раз
закончилась функция main 1-й раз  // ошибка !
закончилась программа
}
Объясните, почему наличие конца функции main в указанном месте ошибочно.
Наличие конца функции main в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_три" входит в следование (тело функции main) один раз, поэтому между началом и концом акта функции main должен присутствовать ровно один акт "делай_три" (который в данном случае отсутствует).
Не хватает акта "делай_три". За одно выполнение следования каждое действие выполняется один раз.

/* 
alg03_seq3 ActsPairMisorder-1 (с.3) Нарушен порядок следования
трасса  категории ошибок: LinearOrder (ActsPairMisorder) */
{
началась программа
началась функция main 1-й раз
    делай_два выполнилось 1-й раз  // ошибка !
    делай_раз выполнилось 1-й раз
    делай_три выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_два" в указанном месте ошибочно.
Наличие акта "делай_два" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_два" входит в следование (тело функции main) после действия "делай_раз", поэтому между началом и концом акта функции main акт "делай_два" должен выполниться после акта "делай_раз" (а не наоборот, как в данном случае).
Действия, следующие друг за другом, выполняются в том порядке, в котором записаны. В данном случае сначала необходимо выполнить "делай_раз", а затем "делай_два".

/* 
alg03_seq3 ActsPairMisorder-2 (с.4) Нарушен порядок следования
трасса  категории ошибок: LinearOrder (ActsPairMisorder) */
{
началась программа
началась функция main 1-й раз
    делай_раз выполнилось 1-й раз
    делай_три выполнилось 1-й раз  // ошибка !
    делай_два выполнилось 1-й раз
закончилась функция main 1-й раз
закончилась программа
}
Объясните, почему наличие акта "делай_три" в указанном месте ошибочно.
Наличие акта "делай_три" в указанном месте ошибочно, потому что ...
// В данном случае, действие "делай_три" входит в следование (тело функции main) после действия "делай_два", поэтому между началом и концом акта функции main акт "делай_три" должен выполниться после акта "делай_два" (а не наоборот, как в данном случае).
Действия, следующие друг за другом, выполняются в том порядке, в котором записаны. В данном случае сначала необходимо выполнить "делай_два", а затем "делай_три".

