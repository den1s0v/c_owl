# unskip_acts.ttl
# Restore acts in trace that have been skipped by a student
# stage 2.2  (after alg_rules and before trace_rules)

@prefix  rdf:      <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

# @prefix  rdfs:     <http://www.w3.org/2000/01/rdf-schema#> .
#
# # An important RDF rules subset
# @include <jena/rdfs4core.rules>.

# include rule `Redirect-normal-end-to-interrupted-end`
# to handle ther need in changing the bound of target act (?b)
@include <jena/relink_acts.ttl>.

@prefix my: <http://vstu.ru/poas/code#> .


###############################
# propagate-skipped-act_ends
###############################


# add obvious end_act(s) next to last correct act `a` (allowing skipping boring "end" acts)
[Add-act-end-to-prev_to_last_act-if-valid:
#	 this link is to be replaced:
	(?a my:student_next ?b),
	(?a rdf:type my:act_end),
	(?a my:executes ?bnd_a),
	(?b my:executes ?bnd_b), (?bnd_b my:boundary_of ?st_b),
#   acts aren't linked with consequent
	noValue(?bnd_a my:consequent ?bnd_b),
#   acts are in upcoming chain (i.e. `b` is a valid subsequence)
	(?bnd_u my:boundary_of ?st_b),
	(?bnd_a my:collapse_bound ?bnd_u),
#   corrected bound (b -> u) isn't linked with consequent,
#	so we still need inserting it.
	noValue(?bnd_a my:consequent ?bnd_u),

#   actual consequent of a is M (middle)
	(?bnd_a my:consequent ?bnd_m),
#   bnd_m is `end_of` or `halt_of`
	noValue(?bnd_m, my:begin_of),

	 ->
	 drop(0),
#	 # setup a task for instanse creation
	 (?a my:__student_next ?b)
	 (?a my:_insert_act_executing ?bnd_m)
##	 print("+++ prepare injection of [end] after", ?a, "that executes", ?bnd_m)
]


# add obvious act_begin(s) next to last correct act `a` (allowing skipping boring "begin" acts)
[Add-act-begin-to-prev_to_last_act-if-valid:
#	 this link is to be replaced:
	(?a my:student_next ?b),
	(?b rdf:type my:act_begin),
	(?a my:executes ?bnd_a),
	(?b my:executes ?bnd_b), (?bnd_b my:boundary_of ?st_b),
#   acts aren't linked with consequent
	noValue(?bnd_a my:consequent ?bnd_b),
#   acts are in upcoming chain (i.e. `b` is a valid subsequence)
	(?bnd_u my:boundary_of ?st_b),
	(?bnd_a my:collapse_bound ?bnd_u),
#   corrected bound (b -> u) isn't linked with consequent,
#	so we still need inserting it.
	noValue(?bnd_a my:consequent ?bnd_u),

#   actual consequent of a is M (middle)
	(?bnd_a my:consequent ?bnd_m),
#   bnd_m is `begin_of`
	(?bnd_m my:begin_of ?some_st),

	 ->
	 drop(0),
#	 # setup a task for instanse creation
	 (?a my:__student_next ?b)
	 (?a my:_insert_act_executing ?bnd_m)
##	 print("+++ prepare injection of [begin] after", ?a, "that executes", ?bnd_m)
]

# add obvious consequent to end of condition (allowing skipping boring "begin of branch/body" acts)
[Add-act-on-true-if-valid:
#	 this link is to be replaced:
	(?a my:student_next ?b),
	(?a rdf:type my:act_end),
	(?a my:expr_value "true"^^xsd:boolean),
	(?a my:executes ?bnd_a),
	(?b my:executes ?bnd_b), (?bnd_b my:boundary_of ?st_b),
#   acts aren't linked with consequent
	noValue(?bnd_a my:consequent ?bnd_b),
#   actual consequent of a is M (middle)
	(?bnd_a my:on_true_consequent ?bnd_m),
#   acts are in upcoming chain (i.e. `b` is a valid subsequence)
	(?bnd_m my:collapse_bound ?bnd_b),
#   corrected bound (b -> u) isn't linked with consequent,
#	so we still need inserting it.
	noValue(?bnd_a my:consequent ?bnd_b),

	 ->
	 drop(0),
#	 # setup a task for instanse creation
	 (?a my:__student_next ?b)
	 (?a my:_insert_act_executing ?bnd_m)
##	 print("+++ prepare injection [on true] after", ?a, "that executes", ?bnd_m)
]

# add obvious consequent to end of condition (allowing skipping boring "end of loop/selection" acts)
[Add-act-on-false-if-valid:
#	 this link is to be replaced:
	(?a my:student_next ?b),
	(?a rdf:type my:act_end),
	(?a my:expr_value "false"^^xsd:boolean),
	(?a my:executes ?bnd_a),
	(?b my:executes ?bnd_b), (?bnd_b my:boundary_of ?st_b),
#   acts aren't linked with consequent
	noValue(?bnd_a my:consequent ?bnd_b),
#   actual consequent of a is M (middle)
	(?bnd_a my:on_false_consequent ?bnd_m),
#   acts are in upcoming chain (i.e. `b` is a valid subsequence)
	(?bnd_u my:boundary_of ?st_b),
	(?bnd_m my:collapse_bound ?bnd_u),
#   corrected bound (b -> u) isn't linked with consequent,
#	so we still need inserting it.
	noValue(?bnd_a my:consequent ?bnd_u),

	 ->
	 drop(0),
#	 # setup a task for instanse creation
	 (?a my:__student_next ?b)
	 (?a my:_insert_act_executing ?bnd_m)
##	 print("+++ prepare injection [on false] after", ?a, "that executes", ?bnd_m)
]




[Insert-act-in-between:
#	 this link is to be replaced with a couple of links:
	(?a my:__student_next ?b),
#	 this temporary links are to be removed:
	(?a my:_insert_act_executing ?bnd_m),

#	 index of b is to be updated:
###	(?b my:student_index ?ib_0),

#	extract act_type from given boundary
	(?bnd_m my:boundary_of ?st_m),
	(?bnd_m ?prop ?st_m), (?prop my:act_class ?act_type),

#	create a middle act instance
	makeNamedSkolem(?M, ?act_type, ?a, ?bnd_m),

#	make id for new act
	(?a my:id ?a_id),
	sum(?a_id, 1000, ?m_id),

#	calc new values for student_index
	(?a my:student_index ?ia),
	sum(?ia, 1, ?im),
###	sum(?ia, 2, ?ib),

	 ->
	 drop(0),
	 drop(1),
###	 drop(2),
#	 # reconnect acts via M
	 (?a my:student_next ?M), (?M my:student_next ?b),
	 (?M rdf:type ?act_type),
	 (?M rdf:type my:implicit_act),
	 (?M my:id ?m_id),
	 (?M my:executes ?bnd_m),
#	 # set student_index
	 (?M my:student_index ?im),
#	  jena fails to set this (ends up with infinite loop)!
###	 (?b my:student_index ?ib),
#	 # TODO: remove debug print
##	 print("-> inject act", ?M, "that executes", ?bnd_m, "indices:", ?im, ?ib),
##	 print("             ", "after", ?a, "and before", ?b)
]

